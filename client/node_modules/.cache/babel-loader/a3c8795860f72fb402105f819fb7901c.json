{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { axiosInstance } from \"../../../axiosInstance\";\nimport { queryKeys } from \"../../../react-query/constants\";\nimport { filterByTreatment } from \"../utils\";\n\n// for when we need a query function for useQuery\nasync function getStaff() {\n  const {\n    data\n  } = await axiosInstance.get(\"/staff\");\n  return data;\n  s;\n}\nexport function useStaff() {\n  _s();\n  // for filtering staff by treatment\n  const [filter, setFilter] = useState(\"all\");\n  const selectFn = useCallback(unfilteredStaff => filterByTreatment(unfilteredStaff, filter), [filter]);\n\n  // TODO: get data from server via useQuery\n  const fallback = [];\n  const {\n    data: staff = fallback\n  } = useQuery(queryKeys.staff, getStaff);\n  return {\n    staff,\n    filter,\n    setFilter\n  };\n}\n_s(useStaff, \"+7JzsuceLCT8xi6DHOZeo5sU/1U=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useCallback","useState","useQuery","axiosInstance","queryKeys","filterByTreatment","getStaff","data","get","s","useStaff","filter","setFilter","selectFn","unfilteredStaff","fallback","staff"],"sources":["/Users/muhammadbilal/Desktop/base-lazy-days/client/src/components/staff/hooks/useStaff.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useCallback, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\nimport type { Staff } from \"../../../../../shared/types\";\nimport { axiosInstance } from \"../../../axiosInstance\";\nimport { queryKeys } from \"../../../react-query/constants\";\nimport { filterByTreatment } from \"../utils\";\n\n// for when we need a query function for useQuery\nasync function getStaff(): Promise<Staff[]> {\n  const { data } = await axiosInstance.get(\"/staff\");\n  return data;s\n}\n\ninterface UseStaff {\n  staff: Staff[];\n  filter: string;\n  setFilter: Dispatch<SetStateAction<string>>;\n}\n\nexport function useStaff(): UseStaff {\n  // for filtering staff by treatment\n  const [filter, setFilter] = useState(\"all\");\n\n  const selectFn = useCallback(\n    (unfilteredStaff) => filterByTreatment(unfilteredStaff, filter),\n    [filter]\n  );\n\n  // TODO: get data from server via useQuery\n  const fallback = [];\n  const { data: staff = fallback } = useQuery(queryKeys.staff, getStaff);\n\n  return { staff, filter, setFilter };\n}\n"],"mappings":";AAAA,SAAmCA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AACvE,SAASC,QAAQ,QAAwB,aAAa;AAGtD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,iBAAiB,QAAQ,UAAU;;AAE5C;AACA,eAAeC,QAAQ,GAAqB;EAC1C,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMJ,aAAa,CAACK,GAAG,CAAC,QAAQ,CAAC;EAClD,OAAOD,IAAI;EAACE,CAAC;AACf;AAQA,OAAO,SAASC,QAAQ,GAAa;EAAA;EACnC;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMY,QAAQ,GAAGb,WAAW,CACzBc,eAAe,IAAKT,iBAAiB,CAACS,eAAe,EAAEH,MAAM,CAAC,EAC/D,CAACA,MAAM,CAAC,CACT;;EAED;EACA,MAAMI,QAAQ,GAAG,EAAE;EACnB,MAAM;IAAER,IAAI,EAAES,KAAK,GAAGD;EAAS,CAAC,GAAGb,QAAQ,CAACE,SAAS,CAACY,KAAK,EAAEV,QAAQ,CAAC;EAEtE,OAAO;IAAEU,KAAK;IAAEL,MAAM;IAAEC;EAAU,CAAC;AACrC;AAAC,GAdeF,QAAQ;EAAA,QAWaR,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}