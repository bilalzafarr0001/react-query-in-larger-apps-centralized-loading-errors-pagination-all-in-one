{"ast":null,"code":"var _s = $RefreshSig$();\nimport jsonpatch from 'fast-json-patch';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { queryKeys } from 'react-query/constants';\n\n// for when we need a server function\nasync function patchUserOnServer(newData, originalData) {\n  if (!newData || !originalData) return null;\n  console.log('newData', newData);\n  console.log('originalData', originalData);\n  // create a patch for the difference between newData and originalData\n  const patch = jsonpatch.compare(originalData, newData);\n\n  // send patched data to the server\n  const {\n    data\n  } = await axiosInstance.patch(`/user/${originalData.id}`, {\n    patch\n  }, {\n    headers: getJWTHeader(originalData)\n  });\n  return data.user;\n}\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser() {\n  _s();\n  const toast = useCustomToast();\n  const {\n    user,\n    updateUser\n  } = useUser();\n  const queryClient = useQueryClient();\n  const {\n    mutate: patchUser\n  } = useMutation(newUserData => patchUserOnServer(newUserData, user), {\n    onMutate: async newData => {\n      queryClient.cancelQueries(queryKeys.user);\n      const previousUserData = queryClient.getQueriesData(queryKeys.user);\n      updateUser(newData);\n      return {\n        previousUserData\n      };\n    },\n    onError: previousUserDataContext => {},\n    onSuccess: userData => {\n      if (user) {\n        updateUser(userData);\n        toast({\n          title: 'User updated!',\n          status: 'success'\n        });\n      }\n    },\n    onSettled: () => {}\n  });\n  return patchUser;\n}\n_s(usePatchUser, \"s6+ebVkgkwhmKX6yNJggeGm6u4A=\", false, function () {\n  return [useCustomToast, useUser, useQueryClient, useMutation];\n});","map":{"version":3,"names":["jsonpatch","useMutation","useQueryClient","axiosInstance","getJWTHeader","useUser","useCustomToast","queryKeys","patchUserOnServer","newData","originalData","console","log","patch","compare","data","id","headers","user","usePatchUser","toast","updateUser","queryClient","mutate","patchUser","newUserData","onMutate","cancelQueries","previousUserData","getQueriesData","onError","previousUserDataContext","onSuccess","userData","title","status","onSettled"],"sources":["/home/muhammadbilal/Desktop/react-query-in-larger-apps-centralized-loading-errors-pagination-all-in-one/client/src/components/user/hooks/usePatchUser.ts"],"sourcesContent":["import jsonpatch from 'fast-json-patch';\nimport { useMutation, UseMutateFunction, useQueryClient } from 'react-query';\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { queryKeys } from 'react-query/constants';\n\n// for when we need a server function\nasync function patchUserOnServer(\n  newData: User | null,\n  originalData: User | null,\n): Promise<User | null> {\n  if (!newData || !originalData) return null;\n  console.log('newData', newData);\n  console.log('originalData', originalData);\n  // create a patch for the difference between newData and originalData\n  const patch = jsonpatch.compare(originalData, newData);\n\n  // send patched data to the server\n  const { data } = await axiosInstance.patch(\n    `/user/${originalData.id}`,\n    { patch },\n    {\n      headers: getJWTHeader(originalData),\n    },\n  );\n  return data.user;\n}\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser(): UseMutateFunction<\n  User,\n  unknown,\n  User,\n  unknown\n> {\n  const toast = useCustomToast();\n  const { user, updateUser } = useUser();\n  const queryClient = useQueryClient();\n\n  const { mutate: patchUser } = useMutation(\n    (newUserData: User) => patchUserOnServer(newUserData, user),\n    {\n      onMutate: async (newData: User | null) => {\n        queryClient.cancelQueries(queryKeys.user);\n        const previousUserData = queryClient.getQueriesData(queryKeys.user);\n        updateUser(newData);\n        return { previousUserData };\n      },\n      onError: (previousUserDataContext) => {},\n      onSuccess: (userData: User | null) => {\n        if (user) {\n          updateUser(userData);\n          toast({\n            title: 'User updated!',\n            status: 'success',\n          });\n        }\n      },\n      onSettled: () => {},\n    },\n  );\n\n  return patchUser;\n}\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,iBAAiB;AACvC,SAASC,WAAW,EAAqBC,cAAc,QAAQ,aAAa;AAE5E,SAASC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AACpE,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,SAAS,QAAQ,uBAAuB;;AAEjD;AACA,eAAeC,iBAAiB,CAC9BC,OAAoB,EACpBC,YAAyB,EACH;EACtB,IAAI,CAACD,OAAO,IAAI,CAACC,YAAY,EAAE,OAAO,IAAI;EAC1CC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,OAAO,CAAC;EAC/BE,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,YAAY,CAAC;EACzC;EACA,MAAMG,KAAK,GAAGb,SAAS,CAACc,OAAO,CAACJ,YAAY,EAAED,OAAO,CAAC;;EAEtD;EACA,MAAM;IAAEM;EAAK,CAAC,GAAG,MAAMZ,aAAa,CAACU,KAAK,CACvC,SAAQH,YAAY,CAACM,EAAG,EAAC,EAC1B;IAAEH;EAAM,CAAC,EACT;IACEI,OAAO,EAAEb,YAAY,CAACM,YAAY;EACpC,CAAC,CACF;EACD,OAAOK,IAAI,CAACG,IAAI;AAClB;;AAEA;AACA,OAAO,SAASC,YAAY,GAK1B;EAAA;EACA,MAAMC,KAAK,GAAGd,cAAc,EAAE;EAC9B,MAAM;IAAEY,IAAI;IAAEG;EAAW,CAAC,GAAGhB,OAAO,EAAE;EACtC,MAAMiB,WAAW,GAAGpB,cAAc,EAAE;EAEpC,MAAM;IAAEqB,MAAM,EAAEC;EAAU,CAAC,GAAGvB,WAAW,CACtCwB,WAAiB,IAAKjB,iBAAiB,CAACiB,WAAW,EAAEP,IAAI,CAAC,EAC3D;IACEQ,QAAQ,EAAE,MAAOjB,OAAoB,IAAK;MACxCa,WAAW,CAACK,aAAa,CAACpB,SAAS,CAACW,IAAI,CAAC;MACzC,MAAMU,gBAAgB,GAAGN,WAAW,CAACO,cAAc,CAACtB,SAAS,CAACW,IAAI,CAAC;MACnEG,UAAU,CAACZ,OAAO,CAAC;MACnB,OAAO;QAAEmB;MAAiB,CAAC;IAC7B,CAAC;IACDE,OAAO,EAAGC,uBAAuB,IAAK,CAAC,CAAC;IACxCC,SAAS,EAAGC,QAAqB,IAAK;MACpC,IAAIf,IAAI,EAAE;QACRG,UAAU,CAACY,QAAQ,CAAC;QACpBb,KAAK,CAAC;UACJc,KAAK,EAAE,eAAe;UACtBC,MAAM,EAAE;QACV,CAAC,CAAC;MACJ;IACF,CAAC;IACDC,SAAS,EAAE,MAAM,CAAC;EACpB,CAAC,CACF;EAED,OAAOZ,SAAS;AAClB;AAAC,GAlCeL,YAAY;EAAA,QAMZb,cAAc,EACCD,OAAO,EAChBH,cAAc,EAEJD,WAAW;AAAA"},"metadata":{},"sourceType":"module"}