{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { clearStoredUser, getStoredUser, setStoredUser } from '../../../user-storage';\nasync function getUser(user) {\n  if (!user) return null;\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}`, {\n    headers: getJWTHeader(user)\n  });\n  return data.user;\n}\nexport function useUser() {\n  _s();\n  const queryClient = useQueryClient();\n\n  // TODO: call useQuery to update user data from server\n  const [user, setUser] = useState(getStoredUser());\n  useQuery(queryKeys.user, () => getUser(user), {\n    enabled: !!user,\n    onSuccess: data => setUser(data)\n  });\n  // meant to be called from useAuth\n\n  function updateUser(newUser) {\n    // update the user\n    setUser(newUser);\n    setStoredUser(newUser);\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    // reset user to null\n    setUser(null);\n    // remove user appointments query\n    clearStoredUser();\n  }\n  return {\n    user,\n    updateUser,\n    clearUser\n  };\n}\n_s(useUser, \"1Evk1TAb7vixwl3lrmC0igEz9tc=\", false, function () {\n  return [useQueryClient, useQuery];\n});","map":{"version":3,"names":["useState","useQuery","useQueryClient","axiosInstance","getJWTHeader","queryKeys","clearStoredUser","getStoredUser","setStoredUser","getUser","user","data","get","id","headers","useUser","queryClient","setUser","enabled","onSuccess","updateUser","newUser","clearUser"],"sources":["/Users/muhammadbilal/Desktop/base-lazy-days/client/src/components/user/hooks/useUser.ts"],"sourcesContent":["import { AxiosResponse } from 'axios';\nimport { useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport {\n  clearStoredUser,\n  getStoredUser,\n  setStoredUser,\n} from '../../../user-storage';\n\nasync function getUser(user: User | null): Promise<User | null> {\n  if (!user) return null;\n  const { data }: AxiosResponse<{ user: User }> = await axiosInstance.get(\n    `/user/${user.id}`,\n    {\n      headers: getJWTHeader(user),\n    },\n  );\n  return data.user;\n}\n\ninterface UseUser {\n  user: User | null;\n  updateUser: (user: User) => void;\n  clearUser: () => void;\n}\n\nexport function useUser(): UseUser {\n  const queryClient = useQueryClient();\n\n  // TODO: call useQuery to update user data from server\n  const [user, setUser] = useState<User | null>(getStoredUser());\n\n  useQuery(queryKeys.user, () => getUser(user), {\n    enabled: !!user,\n    onSuccess: (data) => setUser(data),\n  });\n  // meant to be called from useAuth\n\n  function updateUser(newUser: User): void {\n    // update the user\n    setUser(newUser);\n    setStoredUser(newUser);\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    // reset user to null\n    setUser(null);\n    // remove user appointments query\n    clearStoredUser();\n  }\n\n  return { user, updateUser, clearUser };\n}\n"],"mappings":";AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,EAAEC,cAAc,QAAQ,aAAa;AAGtD,SAASC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AACpE,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SACEC,eAAe,EACfC,aAAa,EACbC,aAAa,QACR,uBAAuB;AAE9B,eAAeC,OAAO,CAACC,IAAiB,EAAwB;EAC9D,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EACtB,MAAM;IAAEC;EAAoC,CAAC,GAAG,MAAMR,aAAa,CAACS,GAAG,CACpE,SAAQF,IAAI,CAACG,EAAG,EAAC,EAClB;IACEC,OAAO,EAAEV,YAAY,CAACM,IAAI;EAC5B,CAAC,CACF;EACD,OAAOC,IAAI,CAACD,IAAI;AAClB;AAQA,OAAO,SAASK,OAAO,GAAY;EAAA;EACjC,MAAMC,WAAW,GAAGd,cAAc,EAAE;;EAEpC;EACA,MAAM,CAACQ,IAAI,EAAEO,OAAO,CAAC,GAAGjB,QAAQ,CAAcO,aAAa,EAAE,CAAC;EAE9DN,QAAQ,CAACI,SAAS,CAACK,IAAI,EAAE,MAAMD,OAAO,CAACC,IAAI,CAAC,EAAE;IAC5CQ,OAAO,EAAE,CAAC,CAACR,IAAI;IACfS,SAAS,EAAGR,IAAI,IAAKM,OAAO,CAACN,IAAI;EACnC,CAAC,CAAC;EACF;;EAEA,SAASS,UAAU,CAACC,OAAa,EAAQ;IACvC;IACAJ,OAAO,CAACI,OAAO,CAAC;IAChBb,aAAa,CAACa,OAAO,CAAC;EACxB;;EAEA;EACA,SAASC,SAAS,GAAG;IACnB;IACAL,OAAO,CAAC,IAAI,CAAC;IACb;IACAX,eAAe,EAAE;EACnB;EAEA,OAAO;IAAEI,IAAI;IAAEU,UAAU;IAAEE;EAAU,CAAC;AACxC;AAAC,GA3BeP,OAAO;EAAA,QACDb,cAAc,EAKlCD,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}