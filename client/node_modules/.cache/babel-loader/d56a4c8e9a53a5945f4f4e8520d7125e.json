{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/* eslint-disable @typescript-eslint/no-shadow */\n\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\n// for when we need a query function for useQuery\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\nexport function useTreatments() {\n  _s();\n  // TODO: get data from server via useQuery\n\n  const fallback = [];\n  const {\n    data = fallback\n  } = useQuery(queryKeys.treatments, getTreatments, {\n    staleTime: 60000 // 10 minutes\n  });\n\n  return data;\n}\n_s(useTreatments, \"Dt1zu2A8Sa6608pid1m3JMfgG5k=\", false, function () {\n  return [useQuery];\n});\nexport function usePrefetchTreatments() {\n  _s2();\n  const queryClient = useQueryClient();\n  queryClient.prefetchQuery(queryKeys.treatments, getTreatments);\n}\n_s2(usePrefetchTreatments, \"4R+oYVB2Uc11P7bp1KcuhpkfaTw=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"names":["useQuery","useQueryClient","axiosInstance","queryKeys","getTreatments","data","get","useTreatments","fallback","treatments","staleTime","usePrefetchTreatments","queryClient","prefetchQuery"],"sources":["/Users/muhammadbilal/Desktop/base-lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-shadow */\nimport { toast } from '@chakra-ui/react';\nimport { useQuery, useQueryClient } from 'react-query';\n\nimport type { Treatment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\n// for when we need a query function for useQuery\nasync function getTreatments(): Promise<Treatment[]> {\n  const { data } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments(): Treatment[] {\n  // TODO: get data from server via useQuery\n\n  const fallback = [];\n  const { data = fallback } = useQuery(queryKeys.treatments, getTreatments,{\n    staleTime :60000 // 10 minutes\n  });\n  return data;\n}\n\nexport function usePrefetchTreatments(): void {\n  const queryClient = useQueryClient();\n  queryClient.prefetchQuery(queryKeys.treatments, getTreatments);\n}\n"],"mappings":";;AAAA;;AAEA,SAASA,QAAQ,EAAEC,cAAc,QAAQ,aAAa;AAGtD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,SAAS,QAAQ,gCAAgC;;AAE1D;AACA,eAAeC,aAAa,GAAyB;EACnD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMH,aAAa,CAACI,GAAG,CAAC,aAAa,CAAC;EACvD,OAAOD,IAAI;AACb;AAEA,OAAO,SAASE,aAAa,GAAgB;EAAA;EAC3C;;EAEA,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAM;IAAEH,IAAI,GAAGG;EAAS,CAAC,GAAGR,QAAQ,CAACG,SAAS,CAACM,UAAU,EAAEL,aAAa,EAAC;IACvEM,SAAS,EAAE,KAAK,CAAC;EACnB,CAAC,CAAC;;EACF,OAAOL,IAAI;AACb;AAAC,GAReE,aAAa;EAAA,QAICP,QAAQ;AAAA;AAMtC,OAAO,SAASW,qBAAqB,GAAS;EAAA;EAC5C,MAAMC,WAAW,GAAGX,cAAc,EAAE;EACpCW,WAAW,CAACC,aAAa,CAACV,SAAS,CAACM,UAAU,EAAEL,aAAa,CAAC;AAChE;AAAC,IAHeO,qBAAqB;EAAA,QACfV,cAAc;AAAA"},"metadata":{},"sourceType":"module"}