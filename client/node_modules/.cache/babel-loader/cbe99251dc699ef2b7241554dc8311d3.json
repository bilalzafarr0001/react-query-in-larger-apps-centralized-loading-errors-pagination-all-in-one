{"ast":null,"code":"import { axiosInstance, getJWTHeader } from '../../../axiosInstance';\n// for when we need a query function for useQuery\nasync function getUserAppointments(user) {\n  if (!user) return null;\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}/appointments`, {\n    headers: getJWTHeader(user)\n  });\n  return data.appointments;\n}\nexport function useUserAppointments() {\n  // TODO replace with React Query\n  return [];\n}","map":{"version":3,"names":["axiosInstance","getJWTHeader","getUserAppointments","user","data","get","id","headers","appointments","useUserAppointments"],"sources":["/Users/muhammadbilal/Desktop/base-lazy-days/client/src/components/user/hooks/useUserAppointments.ts"],"sourcesContent":["import dayjs from 'dayjs';\n\nimport type { Appointment, User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from './useUser';\n\n// for when we need a query function for useQuery\nasync function getUserAppointments(\n  user: User | null,\n): Promise<Appointment[] | null> {\n  if (!user) return null;\n  const { data } = await axiosInstance.get(`/user/${user.id}/appointments`, {\n    headers: getJWTHeader(user),\n  });\n  return data.appointments;\n}\n\nexport function useUserAppointments(): Appointment[] {\n  // TODO replace with React Query\n  return [];\n}\n"],"mappings":"AAGA,SAASA,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AAIpE;AACA,eAAeC,mBAAmB,CAChCC,IAAiB,EACc;EAC/B,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EACtB,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMJ,aAAa,CAACK,GAAG,CAAE,SAAQF,IAAI,CAACG,EAAG,eAAc,EAAE;IACxEC,OAAO,EAAEN,YAAY,CAACE,IAAI;EAC5B,CAAC,CAAC;EACF,OAAOC,IAAI,CAACI,YAAY;AAC1B;AAEA,OAAO,SAASC,mBAAmB,GAAkB;EACnD;EACA,OAAO,EAAE;AACX"},"metadata":{},"sourceType":"module"}