{"ast":null,"code":"var _s = $RefreshSig$();\n// @ts-nocheck\nimport axios from 'axios';\nimport { useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { clearStoredUser, getStoredUser, setStoredUser } from '../../../user-storage';\nasync function getUser(user) {\n  const source = axios.CancelToken.source();\n  if (!user) return null;\n  const axiosResponse = await axiosInstance.get(`/user/${user.id}`, {\n    headers: getJWTHeader(user),\n    cancelToken: source.token\n  });\n  axiosResponse.cancel = () => {\n    source.cancel();\n  };\n  return axiosResponse;\n}\nexport function useUser() {\n  _s();\n  const queryClient = useQueryClient();\n\n  // TODO: call useQuery to update user data from server\n  const [user, setUser] = useState(getStoredUser());\n  useQuery(queryKeys.user, () => getUser(user), {\n    enabled: !!user,\n    onSuccess: axiosResponse => {\n      var _axiosResponse$data;\n      return setUser(axiosResponse === null || axiosResponse === void 0 ? void 0 : (_axiosResponse$data = axiosResponse.data) === null || _axiosResponse$data === void 0 ? void 0 : _axiosResponse$data.user);\n    }\n  });\n  function updateUser(newUser) {\n    // update the user\n    queryClient.setQueryData(queryKeys.user, newUser);\n    setStoredUser(newUser);\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    // reset user to null\n    setUser(null);\n    // remove user appointments query\n    clearStoredUser();\n    queryClient.setQueryData(queryKeys.user, null);\n    queryClient.removeQueries([queryKeys.appointments, queryKeys.user]);\n  }\n  return {\n    user,\n    updateUser,\n    clearUser\n  };\n}\n_s(useUser, \"1Evk1TAb7vixwl3lrmC0igEz9tc=\", false, function () {\n  return [useQueryClient, useQuery];\n});","map":{"version":3,"names":["axios","useState","useQuery","useQueryClient","axiosInstance","getJWTHeader","queryKeys","clearStoredUser","getStoredUser","setStoredUser","getUser","user","source","CancelToken","axiosResponse","get","id","headers","cancelToken","token","cancel","useUser","queryClient","setUser","enabled","onSuccess","data","updateUser","newUser","setQueryData","clearUser","removeQueries","appointments"],"sources":["/home/muhammadbilal/Desktop/react-query-in-larger-apps-centralized-loading-errors-pagination-all-in-one/client/src/components/user/hooks/useUser.ts"],"sourcesContent":["// @ts-nocheck\nimport axios, { AxiosResponse } from 'axios';\nimport { useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport {\n  clearStoredUser,\n  getStoredUser,\n  setStoredUser,\n} from '../../../user-storage';\n\ninterface AxiosResponseWithCancel extends AxiosResponse {\n  cancel: () => void;\n}\n\nasync function getUser(user: User | null): Promise<AxiosResponse> {\n  const source = axios.CancelToken.source();\n  if (!user) return null;\n  const axiosResponse = await axiosInstance.get(`/user/${user.id}`, {\n    headers: getJWTHeader(user),\n    cancelToken: source.token,\n  });\n\n  axiosResponse.cancel = () => {\n    source.cancel();\n  };\n  return axiosResponse;\n}\n\ninterface UseUser {\n  user: User | null;\n  updateUser: (user: User) => void;\n  clearUser: () => void;\n}\n\nexport function useUser(): UseUser {\n  const queryClient = useQueryClient();\n\n  // TODO: call useQuery to update user data from server\n  const [user, setUser] = useState<User | null>(getStoredUser());\n\n  useQuery(queryKeys.user, () => getUser(user), {\n    enabled: !!user,\n    onSuccess: (axiosResponse) => setUser(axiosResponse?.data?.user),\n  });\n\n  function updateUser(newUser: User): void {\n    // update the user\n    queryClient.setQueryData(queryKeys.user, newUser);\n    setStoredUser(newUser);\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    // reset user to null\n    setUser(null);\n    // remove user appointments query\n    clearStoredUser();\n    queryClient.setQueryData(queryKeys.user, null);\n    queryClient.removeQueries([queryKeys.appointments, queryKeys.user]);\n  }\n\n  return { user, updateUser, clearUser };\n}\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAyB,OAAO;AAC5C,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,EAAEC,cAAc,QAAQ,aAAa;AAGtD,SAASC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AACpE,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SACEC,eAAe,EACfC,aAAa,EACbC,aAAa,QACR,uBAAuB;AAM9B,eAAeC,OAAO,CAACC,IAAiB,EAA0B;EAChE,MAAMC,MAAM,GAAGZ,KAAK,CAACa,WAAW,CAACD,MAAM,EAAE;EACzC,IAAI,CAACD,IAAI,EAAE,OAAO,IAAI;EACtB,MAAMG,aAAa,GAAG,MAAMV,aAAa,CAACW,GAAG,CAAE,SAAQJ,IAAI,CAACK,EAAG,EAAC,EAAE;IAChEC,OAAO,EAAEZ,YAAY,CAACM,IAAI,CAAC;IAC3BO,WAAW,EAAEN,MAAM,CAACO;EACtB,CAAC,CAAC;EAEFL,aAAa,CAACM,MAAM,GAAG,MAAM;IAC3BR,MAAM,CAACQ,MAAM,EAAE;EACjB,CAAC;EACD,OAAON,aAAa;AACtB;AAQA,OAAO,SAASO,OAAO,GAAY;EAAA;EACjC,MAAMC,WAAW,GAAGnB,cAAc,EAAE;;EAEpC;EACA,MAAM,CAACQ,IAAI,EAAEY,OAAO,CAAC,GAAGtB,QAAQ,CAAcO,aAAa,EAAE,CAAC;EAE9DN,QAAQ,CAACI,SAAS,CAACK,IAAI,EAAE,MAAMD,OAAO,CAACC,IAAI,CAAC,EAAE;IAC5Ca,OAAO,EAAE,CAAC,CAACb,IAAI;IACfc,SAAS,EAAGX,aAAa;MAAA;MAAA,OAAKS,OAAO,CAACT,aAAa,aAAbA,aAAa,8CAAbA,aAAa,CAAEY,IAAI,wDAAnB,oBAAqBf,IAAI,CAAC;IAAA;EAClE,CAAC,CAAC;EAEF,SAASgB,UAAU,CAACC,OAAa,EAAQ;IACvC;IACAN,WAAW,CAACO,YAAY,CAACvB,SAAS,CAACK,IAAI,EAAEiB,OAAO,CAAC;IACjDnB,aAAa,CAACmB,OAAO,CAAC;EACxB;;EAEA;EACA,SAASE,SAAS,GAAG;IACnB;IACAP,OAAO,CAAC,IAAI,CAAC;IACb;IACAhB,eAAe,EAAE;IACjBe,WAAW,CAACO,YAAY,CAACvB,SAAS,CAACK,IAAI,EAAE,IAAI,CAAC;IAC9CW,WAAW,CAACS,aAAa,CAAC,CAACzB,SAAS,CAAC0B,YAAY,EAAE1B,SAAS,CAACK,IAAI,CAAC,CAAC;EACrE;EAEA,OAAO;IAAEA,IAAI;IAAEgB,UAAU;IAAEG;EAAU,CAAC;AACxC;AAAC,GA5BeT,OAAO;EAAA,QACDlB,cAAc,EAKlCD,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}