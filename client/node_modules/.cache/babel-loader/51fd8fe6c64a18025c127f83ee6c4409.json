{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { getStoredUser } from '../../../user-storage';\nimport { useState } from 'react';\nasync function getUser(user) {\n  if (!user) return null;\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}`, {\n    headers: getJWTHeader(user)\n  });\n  return data.user;\n}\nexport function useUser() {\n  _s();\n  // TODO: call useQuery to update user data from server\n  const [user, setUser] = useState(getStoredUser());\n  useQuery(queryKeys.user, () => getUser(user), {\n    enabled: !!user,\n    onSuccess: data => setUser(data)\n  });\n  // meant to be called from useAuth\n  function updateUser(newUser) {\n    // TODO: update the user in the query cache\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    // TODO: reset user to null in query cache\n  }\n  return {\n    user,\n    updateUser,\n    clearUser\n  };\n}\n_s(useUser, \"OSpVOLH32kyJE6bR6K04GqqLIyo=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","axiosInstance","getJWTHeader","queryKeys","getStoredUser","useState","getUser","user","data","get","id","headers","useUser","setUser","enabled","onSuccess","updateUser","newUser","clearUser"],"sources":["/Users/muhammadbilal/Desktop/base-lazy-days/client/src/components/user/hooks/useUser.ts"],"sourcesContent":["import { AxiosResponse } from 'axios';\nimport { useQuery } from 'react-query';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport {\n  clearStoredUser,\n  getStoredUser,\n  setStoredUser,\n} from '../../../user-storage';\nimport { useState } from 'react';\n\nasync function getUser(user: User | null): Promise<User | null> {\n  if (!user) return null;\n  const { data }: AxiosResponse<{ user: User }> = await axiosInstance.get(\n    `/user/${user.id}`,\n    {\n      headers: getJWTHeader(user),\n    },\n  );\n  return data.user;\n}\n\ninterface UseUser {\n  user: User | null;\n  updateUser: (user: User) => void;\n  clearUser: () => void;\n}\n\nexport function useUser(): UseUser {\n  // TODO: call useQuery to update user data from server\n  const [user, setUser] = useState<User | null>(getStoredUser());\n\n  useQuery(queryKeys.user, () => getUser(user), {\n    enabled: !!user,\n    onSuccess: (data) => setUser(data),\n  });\n  // meant to be called from useAuth\n  function updateUser(newUser: User): void {\n    // TODO: update the user in the query cache\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    // TODO: reset user to null in query cache\n  }\n\n  return { user, updateUser, clearUser };\n}\n"],"mappings":";AACA,SAASA,QAAQ,QAAQ,aAAa;AAGtC,SAASC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AACpE,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAEEC,aAAa,QAER,uBAAuB;AAC9B,SAASC,QAAQ,QAAQ,OAAO;AAEhC,eAAeC,OAAO,CAACC,IAAiB,EAAwB;EAC9D,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EACtB,MAAM;IAAEC;EAAoC,CAAC,GAAG,MAAMP,aAAa,CAACQ,GAAG,CACpE,SAAQF,IAAI,CAACG,EAAG,EAAC,EAClB;IACEC,OAAO,EAAET,YAAY,CAACK,IAAI;EAC5B,CAAC,CACF;EACD,OAAOC,IAAI,CAACD,IAAI;AAClB;AAQA,OAAO,SAASK,OAAO,GAAY;EAAA;EACjC;EACA,MAAM,CAACL,IAAI,EAAEM,OAAO,CAAC,GAAGR,QAAQ,CAAcD,aAAa,EAAE,CAAC;EAE9DJ,QAAQ,CAACG,SAAS,CAACI,IAAI,EAAE,MAAMD,OAAO,CAACC,IAAI,CAAC,EAAE;IAC5CO,OAAO,EAAE,CAAC,CAACP,IAAI;IACfQ,SAAS,EAAGP,IAAI,IAAKK,OAAO,CAACL,IAAI;EACnC,CAAC,CAAC;EACF;EACA,SAASQ,UAAU,CAACC,OAAa,EAAQ;IACvC;EAAA;;EAGF;EACA,SAASC,SAAS,GAAG;IACnB;EAAA;EAGF,OAAO;IAAEX,IAAI;IAAES,UAAU;IAAEE;EAAU,CAAC;AACxC;AAAC,GAnBeN,OAAO;EAAA,QAIrBZ,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}